// Deprecated

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: protos/refreshToken.proto

package refreshTokenProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RefreshToken_RefreshToken_FullMethodName        = "/refreshTokenProto.RefreshToken/RefreshToken"
	RefreshToken_DestroyRefreshToken_FullMethodName = "/refreshTokenProto.RefreshToken/DestroyRefreshToken"
	RefreshToken_VerifyAccessToken_FullMethodName   = "/refreshTokenProto.RefreshToken/VerifyAccessToken"
	RefreshToken_GetUserInfo_FullMethodName         = "/refreshTokenProto.RefreshToken/GetUserInfo"
)

// RefreshTokenClient is the client API for RefreshToken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefreshTokenClient interface {
	RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AccessToken, error)
	DestroyRefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyAccessToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AccessTokenInfo, error)
	GetUserInfo(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserInfo, error)
}

type refreshTokenClient struct {
	cc grpc.ClientConnInterface
}

func NewRefreshTokenClient(cc grpc.ClientConnInterface) RefreshTokenClient {
	return &refreshTokenClient{cc}
}

func (c *refreshTokenClient) RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, RefreshToken_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refreshTokenClient) DestroyRefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RefreshToken_DestroyRefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refreshTokenClient) VerifyAccessToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AccessTokenInfo, error) {
	out := new(AccessTokenInfo)
	err := c.cc.Invoke(ctx, RefreshToken_VerifyAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refreshTokenClient) GetUserInfo(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, RefreshToken_GetUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefreshTokenServer is the server API for RefreshToken service.
// All implementations must embed UnimplementedRefreshTokenServer
// for forward compatibility
type RefreshTokenServer interface {
	RefreshToken(context.Context, *TokenRequest) (*AccessToken, error)
	DestroyRefreshToken(context.Context, *TokenRequest) (*emptypb.Empty, error)
	VerifyAccessToken(context.Context, *TokenRequest) (*AccessTokenInfo, error)
	GetUserInfo(context.Context, *TokenRequest) (*UserInfo, error)
	mustEmbedUnimplementedRefreshTokenServer()
}

// UnimplementedRefreshTokenServer must be embedded to have forward compatible implementations.
type UnimplementedRefreshTokenServer struct {
}

func (UnimplementedRefreshTokenServer) RefreshToken(context.Context, *TokenRequest) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedRefreshTokenServer) DestroyRefreshToken(context.Context, *TokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyRefreshToken not implemented")
}
func (UnimplementedRefreshTokenServer) VerifyAccessToken(context.Context, *TokenRequest) (*AccessTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessToken not implemented")
}
func (UnimplementedRefreshTokenServer) GetUserInfo(context.Context, *TokenRequest) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedRefreshTokenServer) mustEmbedUnimplementedRefreshTokenServer() {}

// UnsafeRefreshTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefreshTokenServer will
// result in compilation errors.
type UnsafeRefreshTokenServer interface {
	mustEmbedUnimplementedRefreshTokenServer()
}

func RegisterRefreshTokenServer(s grpc.ServiceRegistrar, srv RefreshTokenServer) {
	s.RegisterService(&RefreshToken_ServiceDesc, srv)
}

func _RefreshToken_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshToken_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServer).RefreshToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefreshToken_DestroyRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServer).DestroyRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshToken_DestroyRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServer).DestroyRefreshToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefreshToken_VerifyAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServer).VerifyAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshToken_VerifyAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServer).VerifyAccessToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefreshToken_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefreshTokenServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefreshToken_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefreshTokenServer).GetUserInfo(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefreshToken_ServiceDesc is the grpc.ServiceDesc for RefreshToken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefreshToken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "refreshTokenProto.RefreshToken",
	HandlerType: (*RefreshTokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshToken",
			Handler:    _RefreshToken_RefreshToken_Handler,
		},
		{
			MethodName: "DestroyRefreshToken",
			Handler:    _RefreshToken_DestroyRefreshToken_Handler,
		},
		{
			MethodName: "VerifyAccessToken",
			Handler:    _RefreshToken_VerifyAccessToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _RefreshToken_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/refreshToken.proto",
}
